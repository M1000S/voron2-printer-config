#####################################################################
#   Macros
#####################################################################

#======================
[gcode_macro Voron]
description: Voron variable storage macro, will echo variables to the console when run.

variable_print_start_active: False
variable_qgl_active: False

variable_probing_nozzle_temp: 155
variable_probing_nozzle_temp_tolerance: 5


variable_z_offsets: {
        'SMOOTH': { 
            'ABS': -0.03,
            'PETG': -0.05
        },
        'STRUCTURED': {
            'ABS': -0.07,
            'PETG': -0.04
        }
    }

variable_filament: {
        'load' : {
            'speed': 5.0, 
            'length' : 70.0, 
            'purge':40.0 
        },
        'unload' : {
            'speed': 2.5,
            'length': 65.0,
            'length_fast': 30.0,
            'ramming': 18.0,
            'purge': 10.0
        },
        'type' : {
            'ABS' : {
                'extruder' : 250.0,
                'z_offset' : -0.135 # structured
                #'z_offset' : -0.105 # structured old
                #'z_offset' : -0.015 # smooth
            },
            'PETG' : {
                'extruder' : 230.0,
                'z_offset' : -0.095 # structured
                #'z_offset' : 0.0 # smooth
            }
        }
    }

gcode:
  ECHO_VORON_VARS

#======================
[gcode_macro ECHO_VORON_VARS]
description: Echo Voron variables to the console.
gcode:
  {% for var, value in printer["gcode_macro Voron"].items() %}
    {action_respond_info(var ~ ": " ~ value)}
  {% endfor %}

#======================
[gcode_macro HOME_IF_NOT]
description: Home all axis only if not already homed
gcode:   
   {% if not "xyz" in printer.toolhead.homed_axes %}
      G28
   {% endif%}


[gcode_macro QGL_HOME_IF_NOT]
gcode:
    {% if printer.quad_gantry_level.applied == False %}
        QUAD_GANTRY_LEVEL
        G28 Z
    {% endif %}

#======================
[gcode_macro QUAD_GANTRY_LEVEL]
description: set status variable for condidional probe deactivation
rename_existing: QUAD_GANTRY_LEVEL_BASE
gcode:
    #RESPOND MSG="QUAD_BATRY_LEVEL overwrite"
  
    SET_GCODE_VARIABLE MACRO=Voron VARIABLE=qgl_active VALUE=True
  
    HOME_IF_NOT
    QUAD_GANTRY_LEVEL_BASE

    SET_GCODE_VARIABLE MACRO=Voron VARIABLE=qgl_active VALUE=False

#======================
[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    G28
    QUAD_GANTRY_LEVEL
    G28
    PARK
    RESTORE_GCODE_STATE NAME=STATE_G32

#======================
[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
gcode:
    # Parameters
    {% set bedtemp = params.BED|int %}
    {% set hotendtemp = params.EXTRUDER|int %}
    {% set chambertemp = params.CHAMBER|default(0)|int %}    

    SET_GCODE_VARIABLE MACRO=Voron VARIABLE=print_start_active VALUE=True
    status_busy
    BED_MESH_CLEAR
#    AIRFILTER_ON                   ; turn on aurfilter
#    AIRFILTER_AUTO_KA_ON           ; Keep airfilter alive until print end
    M140 S{bedtemp}                ; Start bed heating
    CHAMBER_HEAT_SOAK TEMP={chambertemp}         ; Wait for chamber temperature reached
    _CLEAN_NOZZLE_PRINT_START_1 TEMP={hotendtemp} ; clean nozzle for qgl and bed mesh
    QUAD_GANTRY_LEVEL              ; level gantry
    G28 Z                          ; home z with leveled gantry
    G90                            ; absolute positioning
    G1 Z20 F3000                   ; move nozzle away from bed
    M190 S{bedtemp}                ; Wait for bed temp reached
    #BED_MESH_CALIBRATE             ; Generate bed mesh
    BED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}
    _CLEAN_NOZZLE_PRINT_START_2 TEMP={hotendtemp}  ; clean nozzle temporary instead of purging?
    
    SET_Z_OFFSET_FILAMENT          ; Apply filament specific z offset delta
    M109 S{hotendtemp}             ; Wait for extrusion temp reached
    status_printing
    SET_GCODE_VARIABLE MACRO=Voron VARIABLE=print_start_active VALUE=False 


#======================
[gcode_macro PRINT_START_MMU_1]
gcode:
    # Parameters
    {% set bedtemp = params.BED|int %}
    {% set hotendtemp = params.EXTRUDER|int %}
    {% set chambertemp = params.CHAMBER|default(0)|int %}    
    {% set th = printer.toolhead %}

    SET_GCODE_VARIABLE MACRO=Voron VARIABLE=print_start_active VALUE=True
    #status_busy
    M140 S{bedtemp}                ; Start bed heating
    HOME_IF_NOT
    G0 Z50.0 F3000
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    BED_MESH_CLEAR
    CHAMBER_HEAT_SOAK TEMP={chambertemp}         ; Wait for chamber temperature reached
    M190 S{bedtemp}                ; Wait for bed temp reached
    _CLEAN_NOZZLE_PRINT_START_MMU_1 TEMP={hotendtemp} ; clean nozzle for qgl and bed mesh
    QGL_HOME_IF_NOT              ; level gantry
    G28 Z                          ; home z with leveled gantry
    G90                            ; absolute positioning
    BED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}
    G90
    G0 Z50 F3000                   ; move nozzle away from bed
    G0 X30 Y302 F3000              ; filament loading position
    #SAVE_VARIABLE VARIABLE=loaded_filament_type VALUE='"ABS"'

[gcode_macro PRINT_START_MMU_2]
gcode:
    # Parameters
    {% set bedtemp = params.BED|int %}
    {% set hotendtemp = params.EXTRUDER|int %}
    {% set chambertemp = params.CHAMBER|default(0)|int %}    

    _CLEAN_NOZZLE_PRINT_START_MMU_2 TEMP={hotendtemp} 
    SET_Z_OFFSET_BUILDPLATE         ; Apply filament and plate specific z offset
    M109 S{hotendtemp}             ; Wait for extrusion temp reached
    SET_GCODE_VARIABLE MACRO=Voron VARIABLE=print_start_active VALUE=False 


#======================
[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F1800                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END



#======================
[gcode_macro INPUT_SHAPER]
gcode:
    QGL_HOME_IF_NOT
    SHAPER_CALIBRATE



#======================
[gcode_macro DUMP_VARIABLES]
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    
    {action_respond_info(out|join("\n"))}