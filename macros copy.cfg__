#####################################################################
#   Macros
#####################################################################

#======================
[gcode_macro Voron]
description: Voron variable storage macro, will echo variables to the console when run.

variable_print_start_active: False
variable_qgl_active: False

variable_probing_nozzle_temp: 150
variable_probing_nozzle_temp_tolerance: 5

variable_filament: {
        'load' : {
            'speed': 5.0, 
            'length' : 70.0, 
            'purge':40.0 
        },
        'unload' : {
            'speed': 2.5,
            'length': 65.0,
            'length_fast': 30.0,
            'ramming': 18.0,
            'purge': 10.0
        },
        'type' : {
            'ABS' : {
                'extruder' : 250.0
            },
            'PETG' : {
                'extruder' : 230.0
            }
        }
    }

gcode:
  ECHO_VORON_VARS

#======================
[gcode_macro ECHO_VORON_VARS]
description: Echo Voron variables to the console.
gcode:
  {% for var, value in printer["gcode_macro Voron"].items() %}
    {action_respond_info(var ~ ": " ~ value)}
  {% endfor %}


#======================
[gcode_macro DEACTIVATE_TAP_PROBE]
description: called after probing
gcode:
    M104 S0
    RESPOND MSG="PROBE DEACTIVATED!"

#======================
[gcode_macro ACTIVATE_TAP_PROBE]
description: called before probing
gcode:
    {% set PROBE_TEMP = printer["gcode_macro Voron"].probing_nozzle_temp|float %}
    {% set MIN_TEMP = PROBE_TEMP - printer["gcode_macro Voron"].probing_nozzle_temp_tolerance|float %}    
    {% set MAX_TEMP = PROBE_TEMP + printer["gcode_macro Voron"].probing_nozzle_temp_tolerance|float %}
    {% set ACTUAL_TEMP = printer.extruder.temperature %}
    {% set TARGET_TEMP = printer.extruder.target %}
        
    RESPOND MSG="PROBE ACTIVATED!"
    {% if TARGET_TEMP > PROBE_TEMP or TARGET_TEMP < MIN_TEMP %}
        { action_respond_info('Extruder temperature target of %.1fC is too high or to low, setting to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }
        #M109 S{ PROBE_TEMP }
        M104 S{ PROBE_TEMP }
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={ MIN_TEMP } MAXIMUM={ MAX_TEMP } 
    {% else %}
        # Temperature target is already ok, but nozzle may still be too hot/cold.
        {% if ACTUAL_TEMP > MAX_TEMP or ACTUAL_TEMP < MIN_TEMP %}
            { action_respond_info('Extruder temperature %.1fC is still too low or high, waiting until temperature between %.1fC and %.1fC' % (ACTUAL_TEMP, MIN_TEMP, MAX_TEMP)) }
            TEMPERATURE_WAIT SENSOR=extruder MINIMUM={ MIN_TEMP } MAXIMUM={ MAX_TEMP } 
        {% endif %}
    {% endif %}

#======================
[gcode_macro HOME_IF_NOT]
description: Home all axis only if not already homed
gcode:   
   {% if not "xyz" in printer.toolhead.homed_axes %}
      G28
   {% endif%}

#======================
[gcode_macro G28_TEST]
description: turn of hotend heating after z homing is done
#rename_existing: G28001
gcode:
    {% set qgl_active = printer["gcode_macro Voron"].qgl_active %}
    # Inform of overwrite active
    RESPOND MSG="G28 overwrite"
    

    # Lift variable scope for loop
    {% set ns = namespace(heat_extruder=false) %}
    
    # if more than G28 in parmaters, then check if z axis shall be homed
    {% if params|length > 1 %}
        {% for var, value in params.items() %}
            #DEBUG# {action_respond_info(var ~ ": " ~ value)}
            {% if var|lower == 'z' %}
                {% set ns.heat_extruder = true %}
            {% endif %}
        {% endfor %}    
    # Home all axis requested
    {% else %}
        {% set ns.heat_extruder = true %}
    {% endif %}

    #DEBUG# RESPOND MSG={ns.heat_extruder}
    {% if ns.heat_extruder|lower == 'true' %}
        #RESPOND MSG="Z-Axis will be homed: Turn on heating"
        #M104 S150
        # Heating will be started by activate probe
    {% endif %}
    G28001 { rawparams }
    {% if ns.heat_extruder|lower == 'true' %}
        #RESPOND MSG="Z-Axis was homed: Turn off heating"
        {% if not qgl_active %}
            M104 S0
        {% endif %}
    {% endif %}

#======================
[gcode_macro QUAD_GANTRY_LEVEL]
description: set status variable for condidional probe deactivation
rename_existing: QUAD_GANTRY_LEVEL_BASE
gcode:
    RESPOND MSG="QUAD_BATRY_LEVEL overwrite"
  
    SET_GCODE_VARIABLE MACRO=Voron VARIABLE=qgl_active VALUE=True
  
    HOME_IF_NOT
    QUAD_GANTRY_LEVEL_BASE

    SET_GCODE_VARIABLE MACRO=Voron VARIABLE=qgl_active VALUE=False


#======================
[gcode_macro BED_MESH_CALIBRATE]
description: turn of hotend heating after bed mesh is done
rename_existing: BED_MESH_CALIBRATE_BASE
gcode:
  {% set print_start = printer["gcode_macro Voron"].print_start_active %}
  { action_respond_info('Bed Mesh Calibrate overwrite') }
  BED_MESH_CALIBRATE_BASE { rawparams }
  {% if not print_start %}
    M104 S0
  {% endif %}

#======================
[gcode_macro PARK]
gcode:
    {% set th = printer.toolhead %}
    G0 F7200 X{th.axis_maximum.x//4} Y{th.axis_maximum.y//4} Z30  

#======================
[gcode_macro PARK_CENTER]
gcode:
    {% set th = printer.toolhead %}
    G0 F7200 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} Z{th.axis_maximum.z//2}

#======================
[gcode_macro PARK_FRONT]
gcode:
    {% set th = printer.toolhead %}
    G0 F7200 X{th.axis_maximum.x//2} Y0 Z{th.axis_maximum.z//2}

#======================
[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    G28
    QUAD_GANTRY_LEVEL
    G28
    PARK
    RESTORE_GCODE_STATE NAME=STATE_G32

#======================
[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
gcode:
    # Parameters
    {% set bedtemp = params.BED|int %}
    {% set hotendtemp = params.EXTRUDER|int %}
    {% set chambertemp = params.CHAMBER|default(0)|int %}    

    SET_GCODE_VARIABLE MACRO=Voron VARIABLE=print_start_active VALUE=True

    BED_MESH_CLEAR
    M140 S{bedtemp}                ; Start bed heating
    HOME_IF_NOT                    ; home all axes if not homed
    CLEAN_NOZZLE_HOT TEMP={hotendtemp}              ; clean nozzle for qgl and bed mesh
    QUAD_GANTRY_LEVEL              ; level gantry
    G28 Z                          ; home z with leveled gantry
    G90                            ; absolute positioning
    G1 Z20 F3000                   ; move nozzle away from bed
    M190 S{bedtemp}                ; Wait for bed temp reached
    BED_MESH_CALIBRATE             ; Generate bed mesh
    PURGE_CLEAN_NOZZLE_PRINT_START TEMP={hotendtemp}  ; clean nozzle temporary instead of purging?
    M109 S{hotendtemp}             ; Wait for extrusion temp reached
    
    SET_GCODE_VARIABLE MACRO=Voron VARIABLE=print_start_active VALUE=False 


#======================
[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F1800                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

#======================
[gcode_shell_command mcu_flash]
command: /home/pi/printer_data/config/scripts/mcu_flash/mcu_flash.sh
timeout: 60
verbose: True

#======================
[gcode_macro MCUFLASH]
gcode:
    RUN_SHELL_COMMAND CMD=mcu_flash

#======================
[gcode_macro DUMP_VARIABLES]
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    
    {action_respond_info(out|join("\n"))}